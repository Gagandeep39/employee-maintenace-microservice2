// Declarative Approach - Jenkins pipeline to build and publish docker image
pipeline {
    agent any
    ws('employee-eureka-server') {
        sh 'pwd'
    }
    environment {
        IMAGE = readMavenPom().getArtifactId()
        VERSION = readMavenPom().getVersion()
    }

    stages {
        stage('Preparation') {
            steps {
        sh 'pwd'
                checkout scm
                sh 'git rev-parse --short HEAD > .git/commit-id'
                script {
                    commit_id = readFile('.git/commit-id').trim()
                }
                sh 'chmod +x mvnw'
            }
        }
        stage ('Compile Stage') {
            steps {
                sh'./mvnw clean compile'
            }
        }
        stage ('Testing Stage') {
            steps {
                sh'./mvnw test'
            }
        }
        stage ('Package Stage') {
            steps {
                sh'./mvnw package'
            }
        }
        stage ('Build/Publish') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker') {
                        docker.build("gagandeep39/spring-jenkins-demo:${VERSION}", '.').push()
                        docker.build("gagandeep39/spring-jenkins-demo:latest", '.').push()
                    }
                }
            }
        }
        stage ('Deploy on this Server') {
            steps {
                script {
                    sh 'docker stop spring-jenkins-demo || echo Container is not on'
                    sh 'docker container rm -f spring-jenkins-demo || echo Container doesnt exists'
                    docker.image('gagandeep39/spring-jenkins-demo:' + VERSION).run('-p 8081:8081 --name spring-jenkins-demo')
                    sh 'docker image prune -f'
                }
            }
        }
    }
}